input:
    input.go: |
        package structs

        // goverter:converter
        // goverter:ignoreUnexported
        type Converter interface {
            Convert1(source []struct{}) []struct{}
            Convert2(source map[string]struct{}) map[string]struct{}
            Convert4(source *struct{}) *struct{}
            Convert5(source map[string]struct{Name string}) map[string]struct{}
            Convert6(source map[string]struct{Name string}) map[string]struct{name string}
            Convert7(source map[struct{}]struct{}) map[struct{}]struct{}
            Convert8(source map[struct{}]struct{}) map[struct{name string}]struct{}
            Convert9(source map[struct{}]struct{}) map[struct{name string}]struct{name string}
        }

        // goverter:converter
        type Converter2 interface {
            Convert(source struct{}) struct{}
        }
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        type Converter2Impl struct{}

        func (c *Converter2Impl) Convert(source struct{}) struct{} {
        	return source
        }

        type ConverterImpl struct{}

        func (c *ConverterImpl) Convert1(source []struct{}) []struct{} {
        	var unnamedList []struct{}
        	if source != nil {
        		unnamedList = make([]struct{}, len(source))
        		for i := 0; i < len(source); i++ {
        			unnamedList[i] = source[i]
        		}
        	}
        	return unnamedList
        }
        func (c *ConverterImpl) Convert2(source map[string]struct{}) map[string]struct{} {
        	mapStringUnnamed := make(map[string]struct{}, len(source))
        	for key, value := range source {
        		mapStringUnnamed[key] = value
        	}
        	return mapStringUnnamed
        }
        func (c *ConverterImpl) Convert4(source *struct{}) *struct{} {
        	var pUnnamed *struct{}
        	if source != nil {
        		unnamed := (*source)
        		pUnnamed = &unnamed
        	}
        	return pUnnamed
        }
        func (c *ConverterImpl) Convert5(source map[string]struct {
        	Name string
        }) map[string]struct{} {
        	mapStringUnnamed := make(map[string]struct{}, len(source))
        	for key, value := range source {
        		var unnamed struct{}
        		_ = value
        		mapStringUnnamed[key] = unnamed
        	}
        	return mapStringUnnamed
        }
        func (c *ConverterImpl) Convert6(source map[string]struct {
        	Name string
        }) map[string]struct {
        	name string
        } {
        	mapStringUnnamed := make(map[string]struct {
        		name string
        	}, len(source))
        	for key, value := range source {
        		var unnamed struct {
        			name string
        		}
        		_ = value
        		mapStringUnnamed[key] = unnamed
        	}
        	return mapStringUnnamed
        }
        func (c *ConverterImpl) Convert7(source map[struct{}]struct{}) map[struct{}]struct{} {
        	mapUnnamedUnnamed := make(map[struct{}]struct{}, len(source))
        	for key, value := range source {
        		mapUnnamedUnnamed[key] = value
        	}
        	return mapUnnamedUnnamed
        }
        func (c *ConverterImpl) Convert8(source map[struct{}]struct{}) map[struct {
        	name string
        }]struct{} {
        	mapUnnamedUnnamed := make(map[struct {
        		name string
        	}]struct{}, len(source))
        	for key, value := range source {
        		var unnamed struct {
        			name string
        		}
        		_ = key
        		mapUnnamedUnnamed[unnamed] = value
        	}
        	return mapUnnamedUnnamed
        }
        func (c *ConverterImpl) Convert9(source map[struct{}]struct{}) map[struct {
        	name string
        }]struct {
        	name string
        } {
        	mapUnnamedUnnamed := make(map[struct {
        		name string
        	}]struct {
        		name string
        	}, len(source))
        	for key, value := range source {
        		var unnamed struct {
        			name string
        		}
        		_ = key
        		var unnamed2 struct {
        			name string
        		}
        		_ = value
        		mapUnnamedUnnamed[unnamed] = unnamed2
        	}
        	return mapUnnamedUnnamed
        }
