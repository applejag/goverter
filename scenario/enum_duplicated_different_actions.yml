input:
    input.go: |
        package example

        import (
            input "github.com/jmattheis/goverter/execution/input"
            output "github.com/jmattheis/goverter/execution/output"
        )

        // goverter:converter
        // goverter:enum:unknown @panic
        type Converter interface {
            // goverter:enum:map Default @ignore
            // goverter:enum:map Gray @panic
            Convert(input.Color) output.Color
        }
    input/enum.go: |
        package input

        type Color int

        const (
            Default = Gray
            Green Color = 1
            Gray  Color = 2
        )
    output/enum.go: |
        package output

        type Color string
        const (
            Default = Green
            Green Color = "green"
            Gray  Color = "gray"
        )
error: |-
    Error while creating converter method:
        @workdir/input.go:13
        func (github.com/jmattheis/goverter/execution.Converter).Convert(github.com/jmattheis/goverter/execution/input.Color) github.com/jmattheis/goverter/execution/output.Color
            [source] github.com/jmattheis/goverter/execution/input.Color
            [target] github.com/jmattheis/goverter/execution/output.Color

    | github.com/jmattheis/goverter/execution/input.Color
    |
    |      | Gray(2)
    |      |
    source.Gray
    target.@panic
    |      |
    |      | @panic(action)
    |
    | github.com/jmattheis/goverter/execution/output.Color

    Detected multiple enum source members with the same value but different target values/actions.
        Default(2) -> @ignore(action)
        Gray(2) -> @panic(action)

    Explicitly define what the correct mapping is. E.g. by adding
        goverter:enum:map Default @ignore
        goverter:enum:map Gray @ignore

    See https://goverter.jmattheis.de/guide/enum#mapping-enum-keys
