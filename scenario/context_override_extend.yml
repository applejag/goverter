input:
    input.go: |
        package example

        // goverter:converter
        // goverter:extend Two
        // goverter:extend One
        type Conv1 interface {
            Convert(source []string, ctx map[string]Output) []Output
        }

        // goverter:converter
        // goverter:extend One
        // goverter:extend Two
        type Conv2 interface {
            Convert(source []string, ctx map[string]Output) []Output
        }

        func One(id string, ctx map[string]Output) Output { return ctx[id] }
        func Two(id string) Output { return Output{} }

        type Output struct {}
success:
    - generated/generated.go: |
        // Code generated by github.com/jmattheis/goverter, DO NOT EDIT.

        package generated

        import execution "github.com/jmattheis/goverter/execution"

        type Conv1Impl struct{}

        func (c *Conv1Impl) Convert(source []string, context map[string]execution.Output) []execution.Output {
        	var exampleOutputList []execution.Output
        	if source != nil {
        		exampleOutputList = make([]execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			exampleOutputList[i] = execution.One(source[i], context)
        		}
        	}
        	return exampleOutputList
        }

        type Conv2Impl struct{}

        func (c *Conv2Impl) Convert(source []string, context map[string]execution.Output) []execution.Output {
        	var exampleOutputList []execution.Output
        	if source != nil {
        		exampleOutputList = make([]execution.Output, len(source))
        		for i := 0; i < len(source); i++ {
        			exampleOutputList[i] = execution.Two(source[i])
        		}
        	}
        	return exampleOutputList
        }
